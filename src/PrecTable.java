
public class PrecTable {
	
	//Precedence table
	//0:  equal precedence, shift
	//1:  lower precedence, shift
	//2:  higher precedence, reduce
	//3:  error
	//-1: accept
	
	static int[][] table = new int[][] {
			{3,0,0,0,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //ID
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2}, //<-  --  Changed from {1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}
			{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}, //.
			{1,3,3,1,1,0,1,3,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //(
			{1,3,3,1,2,2,1,3,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //,
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //) 
			{1,3,3,1,3,3,1,0,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //if
			{1,3,3,1,3,3,1,3,0,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //then
			{1,3,3,1,3,3,1,3,3,0,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //else
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //fi
			{1,3,3,1,3,3,1,3,3,3,1,0,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //while
			{1,3,3,1,3,3,1,3,3,3,1,3,0,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //loop
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //pool
			{1,3,3,1,3,3,1,3,3,3,1,3,3,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //{
			{1,3,3,1,3,3,1,3,3,3,1,3,3,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3}, //;
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //}
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2}, //new  --  Changed from {0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,2,1,1,1,2,2,2,1,1,1,1,1,2}, //+
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,2,1,1,1,2,2,2,1,1,1,1,1,2}, //-
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,2,2,2,1,2,2,2,1,1,1,1,1,2}, //*
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,2,2,2,1,2,2,2,1,1,1,1,1,2}, ///
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,2,2,2,1,2,2,2,1,1,1,1,1,2}, //~
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,3,3,3,1,1,1,1,1,2}, //<
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,3,3,3,1,1,1,1,1,2}, //<=
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,3,3,3,1,1,1,1,1,2}, //=
			{1,3,3,1,2,2,1,2,2,2,1,2,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2}, //not
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //INT
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //STR
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //true
			{3,3,3,3,2,2,3,2,2,2,3,2,2,3,2,3,3,2,2,2,2,3,2,2,2,3,3,3,3,3,2}, //false
			{1,3,3,1,3,3,1,3,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1}, //$
	};
	
	static int tableEntry(tnames x, tnames y) {
		return table[toIndex(x)][toIndex(y)];
	}
	
	private static int toIndex(tnames name) {
		switch(name) {
		case ID : {return 0;}
		case CONSTANT : {return 0;}
		case ASSIGN : {return 1;}
		case DOT : {return 2;}
		case BRACKETOPEN : {return 3;}
		case COMMA : {return 4;}
		case BRACKETCLOSE : {return 5;}
		case IF : {return 6;}
		case THEN : {return 7;}
		case ELSE : {return 8;}
		case FI : {return 9;}
		case WHILE : {return 10;}
		case LOOP : {return 11;}
		case POOL : {return 12;}
		case BRACEOPEN : {return 13;}
		case SEMI : {return 14;}
		case BRACECLOSE : {return 15;}
		case NEW : {return 16;}
		case ADD : {return 17;}
		case SUB : {return 18;}
		case MUL : {return 19;}
		case DIV : {return 20;}
		case COMPLEMENT : {return 21;}
		case LT : {return 22;}
		case LE : {return 23;}
		case EQ : {return 24;}
		case NOT : {return 25;}
		case INT : {return 26;}
		case STR : {return 27;}
		case TRUE : {return 28;}
		case FALSE : {return 29;}
		case $ : {return 30;}
		default : {return 0;}
		}
	}

}
